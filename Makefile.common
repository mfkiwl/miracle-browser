UAS_TARGET          ?= scale_lpc1114fn28
UAS_EXPERIMENT_SRC  ?= $(UAS_ROOT)/experiments/$(UAS_EXPERIMENT)
UAS_EXPERIMENT_BUILD = $(UAS_BUILD)/$(UAS_EXPERIMENT)/$(UAS_TARGET)

TARGET_DIR           = $(UAS_ROOT)/target/$(UAS_TARGET)

EXPERIMENT_CATAGORY = $(firstword $(subst /, ,$(UAS_EXPERIMENT)))
EXPERIMENT_NAME     = $(lastword $(subst /, ,$(UAS_EXPERIMENT)))

#
# Standard scripts from fw-acquisition
TTEST_CAPTURE       ?= $(UAS_ROOT)/external/fw-acquisition/bin/ttest_capture.py
TTEST_ANALYSE       ?= $(UAS_ROOT)/external/fw-acquisition/bin/ttest_analyse.py
DUMP_TRACES         ?= $(UAS_ROOT)/external/fw-acquisition/bin/dump-stat-traces.py
PLOT                ?= $(UAS_ROOT)/external/fw-acquisition/bin/simple-plot.py
CPA_HW              ?= $(UAS_ROOT)/external/fw-acquisition/bin/cpa-hw.py
CPA_HD              ?= $(UAS_ROOT)/external/fw-acquisition/bin/cpa-hd.py

TTEST_SCOPE_CONFIG   = $(UAS_ROOT)/target/$(UAS_TARGET)/capture/picoscope5000.cfg
TTEST_POWER_CHANNEL  = B

USB_PORT            ?= /dev/ttyUSB0
USB_BAUD            ?= 9600

TARGET_BUILD_MAKEFILE= $(TARGET_DIR)/build/build.mk

EXPERIMENT_CAPTURE_MAKEFILE = $(EXPERIMENT_SRCS)/Makefile.capture

DB_CLI = $(UAS_ROOT)/tools/database/cli.py $(UAS_DB) --backend $(UAS_DB_BACKEND)

#
# Experiment Build Macros
# ------------------------------------------------------------
#

#
# Given the global variables defining build directory, experiment name
# and target device, return a name for the experiment binary elf file.
define map_experiment_elf
$(UAS_EXPERIMENT_BUILD)/program${1}.elf
endef
#
# Given the global variables defining build directory, experiment name
# and target device, return a name for the experiment disassembly file.
define map_experiment_dis
$(UAS_EXPERIMENT_BUILD)/program${1}.dis
endef

#
# Given the global variables defining build directory, experiment name
# and target device, return a name for the experiment hex memory file.
define map_experiment_hex
$(UAS_EXPERIMENT_BUILD)/program${1}.hex
endef

#
# Given the global variables defining build directory, experiment name
# and target device, return a name for the experiment bin memory file.
define map_experiment_bin
$(UAS_EXPERIMENT_BUILD)/program${1}.bin
endef

#
# Given the current target device environment variable, return where
# the makefile defining its "program" target *should* be.
define map_target_program_makefile
$(UAS_ROOT)/target/$(UAS_TARGET)/program/program.mk
endef

#
# TTest Macros
# ------------------------------------------------------------
#

#
# Return a directory path for storing a ttest and it's results in.
#
# 1 - The name of the TTest
#
define map_ttest_dir
$(UAS_EXPERIMENT_BUILD)/ttest${1}
endef

#
# Return a file path for the TTest Logfile
#
# 1  - The name of the TTest
#
define map_ttest_logfile
$(call map_ttest_dir,${1})/ttest.log
endef

#
# Return a file path for the TTest traces file
#
# 1  - The name of the TTest
#
define map_ttest_traces_npy
$(call map_ttest_dir,${1})/traces.npy.gz
endef

#
# Return a file path for the TTest input variable value file
#
# Note: These names are generated to correspond to the fw-acquisition
#       TTestCapture class.
#
# 1 - The name of the TTest
# 2 - Name of the variable.
#
define map_ttest_var_npy
$(call map_ttest_dir,${1})/var-${2}.npy.gz
endef

#
# Return a file path for the TTest Fixed traces mapping file.
#
# 1  - The name of the TTest
#
define map_ttest_fixed_npy
$(call map_ttest_dir,${1})/fixedbits.npy.gz
endef

#
# Return a file path for the TTest graph plot
#
# 1  - The name of the TTest
#
define map_ttest_ttrace_plot
$(UAS_EXPERIMENT_BUILD)/plot/ttrace${1}.svg
endef

#
# Return a file path for the TTest trace numpy dump file.
#
# 1  - The name of the TTest
#
define map_ttest_ttrace_npy
$(UAS_EXPERIMENT_BUILD)/trace/ttrace${1}.npy
endef

#
# Return a makefile target name for capturing a ttest
#
# 1  - The name of the TTest
#
define map_ttest_capture_tgt
capture-ttest${1}
endef

#
# Return a makefile target name for analysing part of a ttest
#
# 1 - The name of the TTest
# 2 - Friendly name of the thing being analysed.
#
define map_ttest_analyse_tgt
analyse-ttest${1}-${2}
endef

#
# Target name for inserting a TTEst trace set into the database
#
# 1 - The name of the TTest
#
define map_db_ttest_insert_tgt
db-insert-ttest${1}
endef

#
# Return a makefile target name for doing a hamming weight analysis on
# the captured TTest traces.
#
# 1 - The name of the TTest
# 2 - The variable whos hamming weight we are considering.
#
define map_cpa_hw_analyse_tgt
analyse-cpa_hw${1}-${2}
endef

#
# Return a makefile target name for doing a hamming distance analysis on
# the captured TTest traces.
#
# 1 - The name of the TTest
# 2 - Variable 1
# 3 - Variable 2
#
define map_cpa_hd_analyse_tgt
analyse-cpa_hd${1}-${2}-${3}
endef


#
# Return a file path for the average trace plot.
#
# 1 - Uniqifying name. Can be empty.
#
define map_ttest_avg_trace_plot
$(UAS_EXPERIMENT_BUILD)/plot/avg-trace${1}.svg
endef

#
# Return a file path for the average trace numpy dump.
#
# 1 - Uniqifying name. Can be empty.
#
define map_ttest_avg_trace_npy
$(UAS_EXPERIMENT_BUILD)/trace/avg-trace${1}.npy
endef

#
# Return a file path for the standard deviation trace plot.
#
# 1 - Uniqifying name. Can be empty.
#
define map_ttest_std_trace_plot
$(UAS_EXPERIMENT_BUILD)/plot/std-trace${1}.svg
endef

#
# Return a file path for the standard deviation trace numpy dump.
#
# 1 - Uniqifying name. Can be empty.
#
define map_ttest_std_trace_npy
$(UAS_EXPERIMENT_BUILD)/trace/std-trace${1}.npy
endef


#
# Return a file path for the minimum trace numpy dump.
#
# 1 - Uniqifying name. Can be empty.
#
define map_ttest_min_trace_npy
$(UAS_EXPERIMENT_BUILD)/trace/min-trace${1}.npy
endef

#
# Return a file path for the maximum trace numpy dump.
#
# 1 - Uniqifying name. Can be empty.
#
define map_ttest_max_trace_npy
$(UAS_EXPERIMENT_BUILD)/trace/max-trace${1}.npy
endef


#
# Return a file path for the range trace plot.
#
# 1 - Uniqifying name. Can be empty.
#
define map_ttest_rng_trace_plot
$(UAS_EXPERIMENT_BUILD)/plot/rng-trace${1}.svg
endef

#
# Return a file path for the range trace numpy dump.
#
# 1 - Uniqifying name. Can be empty.
#
define map_ttest_rng_trace_npy
$(UAS_EXPERIMENT_BUILD)/trace/rng-trace${1}.npy
endef

#
# Return a file path for a hamming weight cpa analysis of a given variable.
# Used for plotting the graph.
#
# 1. TTest Name
# 2. Variable Name
#
define map_ttest_cpa_hw_plot
$(UAS_EXPERIMENT_BUILD)/plot/cpa-hw${1}-${2}.svg
endef

#
# Return a file path for a hamming weight cpa analysis of a given variable.
# Used for dumping the numpy array to file.
#
# 1. TTest Name
# 2. Variable Name
#
define map_ttest_cpa_hw_npy
$(UAS_EXPERIMENT_BUILD)/trace/cpa-hw${1}-${2}.npy
endef

#
# Return a file path for a hamming distance cpa analysis of two variables.
# Used for plotting the graph.
#
# 1. TTest Name
# 2. Variable 1 Name
# 3. Variable 2 Name
#
define map_ttest_cpa_hd_plot
$(UAS_EXPERIMENT_BUILD)/plot/cpa-hd${1}-${2}-${3}.svg
endef

#
# Return a file path for a hamming distance cpa analysis of two variables.
# Used for dumping the numpy array to file.
#
# 1. TTest Name
# 2. Variable 1 Name
# 3. Variable 2 Name
#
define map_ttest_cpa_hd_npy
$(UAS_EXPERIMENT_BUILD)/trace/cpa-hd${1}-${2}-${3}.npy
endef

db-insert-experiment:
	$(DB_CLI) insert-experiment -c $(EXPERIMENT_CATAGORY) $(EXPERIMENT_NAME)


#
# Add a parameterised TTest capture target.
#
# 1. TTest Name
# 2. Arguments to the TTest capture script
#
define tgt_ttest_capture

.PHONY : $(call map_ttest_traces_npy,${1})
$(call map_ttest_traces_npy,${1}) : 
	-mkdir -p $(call map_ttest_dir,${1})
	$(TTEST_CAPTURE) \
	    ${2} \
	    -n $(TTEST_NUM_TRACES) \
	    -l $(call map_ttest_logfile,${1}) \
	    -b $(USB_BAUD) \
	    $(USB_PORT) \
	    $(TTEST_SCOPE_CONFIG) \
	    $(TTEST_POWER_CHANNEL) \
	    $(call map_ttest_traces_npy,${1}) \
	    $(call map_ttest_fixed_npy,${1})


$(call map_ttest_fixed_npy,${1} ): $(call map_ttest_traces_npy,${1})
$(call map_ttest_logfile,${1})   : $(call map_ttest_traces_npy,${1})

$(call map_ttest_capture_tgt,${1}): $(call map_ttest_traces_npy,${1}) \
                                    $(call map_ttest_fixed_npy,${1}) 

endef


#
# Add a target for analysing the results of a TTest
#
# 1. TTest Name
#
define tgt_ttest_analyse

$(call map_ttest_ttrace_npy,${1}) : $(call map_ttest_fixed_npy,${1}) \
                                    $(call map_ttest_traces_npy,${1})
	@mkdir -p $(dir $(call map_ttest_ttrace_npy,${1}))
	$(TTEST_ANALYSE) \
	    --abs \
	    --ttrace-dump $(call map_ttest_ttrace_npy,${1}) \
	    $(call map_ttest_fixed_npy,${1}) \
	    $(call map_ttest_traces_npy,${1})


$(call map_ttest_max_trace_npy,${1}) : $(call map_ttest_min_trace_npy,${1})
$(call map_ttest_min_trace_npy,${1}) : $(call map_ttest_avg_trace_npy,${1})
$(call map_ttest_avg_trace_npy,${1}) : $(call map_ttest_std_trace_npy,${1})
$(call map_ttest_std_trace_npy,${1}) : $(call map_ttest_rng_trace_npy,${1})
$(call map_ttest_rng_trace_npy,${1}) : $(call map_ttest_traces_npy,${1})
	@mkdir -p $(dir $(call map_ttest_avg_trace_npy,${1}))
	$(DUMP_TRACES) \
        --avg-trace $(call map_ttest_avg_trace_npy,${1}) \
        --min       $(call map_ttest_min_trace_npy,${1}) \
        --max       $(call map_ttest_max_trace_npy,${1}) \
	    --stddev    $(call map_ttest_std_trace_npy,${1}) \
	    --range     $(call map_ttest_rng_trace_npy,${1}) \
        $${<}   

$(call map_ttest_ttrace_plot,${1}) : $(PLOT)
$(call map_ttest_ttrace_plot,${1}) : $(call map_ttest_ttrace_npy,${1}) 
	@mkdir -p $(dir $(call map_ttest_ttrace_plot,${1}))
	$(PLOT) --layout overlap --abs --critical-value 4.5 \
        --title "T-Statistic Trace" \
        $${@} $(call map_ttest_ttrace_npy,${1}) 

$(call map_ttest_avg_trace_plot,${1}) : $(PLOT)
$(call map_ttest_avg_trace_plot,${1}) : $(call map_ttest_ttrace_npy,${1}) 
	@mkdir -p $(dir $(call map_ttest_ttrace_plot,${1}))
	$(PLOT) --layout overlap \
        --title "Average power Trace" \
        $${@} $(call map_ttest_avg_trace_npy,${1}) 

$(call map_ttest_std_trace_plot,${1}) : $(PLOT)
$(call map_ttest_std_trace_plot,${1}) : $(call map_ttest_ttrace_npy,${1}) 
	@mkdir -p $(dir $(call map_ttest_ttrace_plot,${1}))
	$(PLOT) --layout overlap \
        --title "Power Trace Standard Deviation" \
        $${@} $(call map_ttest_std_trace_npy,${1}) 

$(call map_db_ttest_insert_tgt,${1}) : \
        $(call map_ttest_fixed_npy,${1}) \
        $(call map_ttest_traces_npy,${1}) \
        db-insert-experiment 
	$(DB_CLI) insert-ttest-traces --replace \
	    --scope-config $(TTEST_SCOPE_CONFIG) \
	    $(UAS_TARGET) \
	    $(UAS_EXPERIMENT) \
	    $(call map_ttest_fixed_npy,${1}) $(call map_ttest_traces_npy,${1}) 

$(call map_ttest_analyse_tgt,${1}) : \
    $(call map_ttest_ttrace_npy,${1}) \
    $(call map_ttest_ttrace_plot,${1}) \
    $(call map_ttest_avg_trace_npy,${1}) \
    $(call map_ttest_avg_trace_plot,${1}) \
    $(call map_ttest_std_trace_npy,${1}) \
    $(call map_ttest_std_trace_plot,${1}) \
    $(call map_ttest_min_trace_npy,${1}) \
    $(call map_ttest_max_trace_npy,${1}) \
    $(call map_ttest_rng_trace_npy,${1}) \
    $(call map_db_ttest_insert_tgt,${1})

endef

#
# Add a Hamming Weight CPA analysis between some TTest traces and
# one of the input varibles to a TTest.
#
# 1. TTest Name
# 2. Variable Name
#
define tgt_cpa_hw_ttest

$(call map_ttest_cpa_hw_npy,${1},${2}) : $(CPA_HW)
$(call map_ttest_cpa_hw_npy,${1},${2}) : $(call map_ttest_traces_npy,${1}) \
                                         $(call map_ttest_var_npy,${1},${2})
	$(CPA_HW) \
        --trace-filter-out $(call map_ttest_fixed_npy,${1}) \
        --dump $${@} \
        $(call map_ttest_traces_npy,${1}) $(call map_ttest_var_npy,${1},${2})

$(call map_ttest_cpa_hw_plot,${1},${2}) : $(PLOT)
$(call map_ttest_cpa_hw_plot,${1},${2}) : $(call map_ttest_cpa_hw_npy,${1},${2})
	$(PLOT) --layout overlap --ymax 1.0 \
        --title "Hamming Weight CPA: ${2}" \
        $${@} $${<}

$(call map_cpa_hw_analyse_tgt,${1},${2}) : \
    $(call map_ttest_cpa_hw_npy,${1},${2}) \
    $(call map_ttest_cpa_hw_plot,${1},${2})

endef


#
# Add a Hamming Distance CPA analysis between some TTest traces and
# one of the input varibles to a TTest.
#
# 1. TTest Name
# 2. Variable 1 Name
# 3. Variable 2 Name
#
define tgt_cpa_hd_ttest

$(call map_ttest_cpa_hd_npy,${1},${2},${3}) : $(CPA_HD)
$(call map_ttest_cpa_hd_npy,${1},${2},${3}) :\
        $(call map_ttest_traces_npy,${1}) \
        $(call map_ttest_var_npy,${1},${2})\
        $(call map_ttest_var_npy,${1},${3})
	$(CPA_HD) \
        --trace-filter-out $(call map_ttest_fixed_npy,${1}) \
        --dump $${@} \
	    $(call map_ttest_traces_npy,${1}) \
	    $(call map_ttest_var_npy,${1},${2})\
	    $(call map_ttest_var_npy,${1},${3})

$(call map_ttest_cpa_hd_plot,${1},${2},${3}) : $(PLOT)
$(call map_ttest_cpa_hd_plot,${1},${2},${3}) : $(call map_ttest_cpa_hd_npy,${1},${2},${3})
	$(PLOT) --layout overlap --ymax 1.0 \
        --title "Hamming Distance CPA: ${2} - ${3}" \
        $${@} $${<}

$(call map_cpa_hd_analyse_tgt,${1},${2},${3}) : \
    $(call map_ttest_cpa_hd_npy,${1},${2},${3}) \
    $(call map_ttest_cpa_hd_plot,${1},${2},${3})

endef

