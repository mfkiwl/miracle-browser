/*!

@defgroup experiments-memory-registers-implicit-ld-st Implicit Load/Store
@ingroup  experiments-memory
@brief Is there implicit leakage on a store-after-load?

@see @ref experiments-memory-registers-implicit-st-ld
@see @ref experiments-memory-registers-implicit-ld-st
@see @ref experiments-memory-registers-implicit-ld-ld
@see @ref experiments-memory-registers-implicit-st-st-1
@see @ref experiments-memory-registers-implicit-st-st-2

## Purpose:

To discover if the RAMS on the target device implicitly load memory
data into a register when it is over-written by a store.

This acts as an analogue to the
@ref experiments-memory-registers-implicit-st-ld
experiment, but does a load followed by a store, rather than a store 
followed by a load.

The idea is to check if and when memory words are implicitly written
to micro-architectural registers.

## Method:

- Take a `DLEN` array of words called `zeros`, which is always zero.
- Take a `DLEN` array of words called `din`.
- Take a pair of input vairables:
  - `idx1` - Index of the arrays to load first.
  - `idx2` - Index of the arrays to load second.
- For each pair of values of `idx1` and `idx2`:
  - Zero the content of `din`, except for the elements at `idx1` and
    `idx2`, which are Fixed/Random TTest variables.
  - **Load** a word from the zeros array into a temporary register, assuming
    that this will "clear" the memory load data-path.
  - **Load** the word at `din[idx1]` into argument register 1.
    - This may load the data into a micro-architectural register.
  - Execute a simple ALU instruction (`xor`) on a temporary register
    which does not store any TTest variables.
    This is assumed to clear pipeline registers which the load
    instructions might use.
  - **Store** zero to the address of the the word at `din[idx2]`.
    - Potentially overwriting the micro-architectural registers with
      the original data being overwritten by the store.
- Each step is separated in time by some NOP instructions to make the
  results easier to interpret.

@note The assumption that the ALU instruction clears pipeline registers
    is not a realistic one for super-scalar micro-architectures.
    It is more reasonable for scalar, in-order micro-architectures of the
    kind which are most realistically subject to power side-channel attack.

## Expectations:

- If a load instruction does indeed move data at the accessed address
  into a micro-architectural register, it is possible that a store
  instruction also does this too.
  - This would mean that any load or store to a memory address sets
    a register to the value at that address. For a load, the CPU
    reads the value in the register. For a store, the CPU ignores
    the register'd value, and the memory address is updated with the
    new value.
- If the store instruction does indeed load the data being overwritten
  into a register, we should see hamming distance leakage between the
  data at `din[idx1]`, which might be written into the register by the
  first load and `din[idx2]`, which might be written into the register
  when the memory location is overwritten with zeros by the store.

## Running the experiment

To run all stages of the experiment for a particular target device:

```
make -B USB_PORT=[PORT] UAS_TARGET=[TARGET] flow-memory-bus-registers-implicit-ld-st
```

Where:
- `[PORT]` Is the UART/Serial port to communicate with it over.
- `[TARGET]` Is one of the target names listed in @ref targets

This will run all of the build, program, capture and analyse steps for
the experiment on the specified target.

The individual steps of the experiment are run with the following commands:

- Build: `make build_[TARGET]_memory-bus-registers-implicit-ld-st`
- Program: `make program_[TARGET]_memory-bus-registers-implicit-ld-st`
- Capture: `make capture_[TARGET]_memory-bus-registers-implicit-ld-st USB_PORT=[PORT]`
- Analyse: `make analyse_[TARGET]_memory-bus-registers-implicit-ld-st`

*/
