/*!

@defgroup experiments-memory-registers-implicit-st-ld Implicit Store/Load
@ingroup  experiments-memory
@brief Is there implicit leakage on a load-after-store?

@see @ref experiments-memory-registers-implicit-st-ld
@see @ref experiments-memory-registers-implicit-ld-st
@see @ref experiments-memory-registers-implicit-ld-ld
@see @ref experiments-memory-registers-implicit-st-st

## Purpose:

This acts as an analogue to the
@ref experiments-memory-registers-implicit-ld-st
experiment, but does a store followed by a load, rather than a load
followed by a store.

The idea is to check if and when memory words are implicitly written
to micro-architectural registers.

## Method:

- Take a `DLEN` array of words called `zeros`, which is always zero.
- Take a `DLEN` array of words called `din`.
- Take a pair of input vairables:
  - `idx1` - Index of the arrays to load first.
  - `idx2` - Index of the arrays to load second.
- For each pair of values of `idx1` and `idx2`:
  - Zero the content of `din`, except for the elements at `idx1` and
    `idx2`, which are Fixed/Random TTest variables.
  - **Load** a word from the zeros array into a temporary register, assuming
    that this will "clear" the memory load data-path.
  - **Store** zeros to the word at `din[idx1]`.
    - This may load the old data at `din[idx1]` into a micro-architectural
      register.
  - Execute a simple ALU instruction (`xor`) on a temporary register
    which does not store any TTest variables.
    This is assumed to clear pipeline registers which the load
    instructions might use.
  - **Load** the word at address `din[idx2]` into a temporary register.
    - Potentially overwriting the micro-architectural registers with
      the original data being overwritten by the store.
- Each step is separated in time by some NOP instructions to make the
  results easier to interpret.

@note The assumption that the ALU instruction clears pipeline registers
    is not a realistic one for super-scalar micro-architectures.
    It is more reasonable for scalar, in-order micro-architectures of the
    kind which are most realistically subject to power side-channel attack.

## Expectations:

- If the first load instruction moves the contents of `din[idx1]` into
  a micro-architectural register, and...
- The store instruction, which zeros the contents of `din[idx2]`, moves
  the *old* contents of `din[idx2]` into the same micro-architectural
  register, then...
- We should see hamming distance leakage between the two TTest variables
  when the store instruction is executed.

## Running the experiment

To run all stages of the experiment for a particular target device:

```
make -B USB_PORT=[PORT] UAS_TARGET=[TARGET] flow-memory-bus-registers-implicit-st-ld
```

Where:
- `[PORT]` Is the UART/Serial port to communicate with it over.
- `[TARGET]` Is one of the target names listed in @ref targets

This will run all of the build, program, capture and analyse steps for
the experiment on the specified target.

The individual steps of the experiment are run with the following commands:

- Build: `make build_[TARGET]_memory-bus-registers-implicit-st-ld`
- Program: `make program_[TARGET]_memory-bus-registers-implicit-st-ld`
- Capture: `make capture_[TARGET]_memory-bus-registers-implicit-st-ld USB_PORT=[PORT]`
- Analyse: `make analyse_[TARGET]_memory-bus-registers-implicit-st-ld`

*/
