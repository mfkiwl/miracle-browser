/*!

@defgroup experiments-memory-bus-width-st-bytes Bus Width - Store Byte
@brief Can we discover memory bus widths from leakage analysis?
@ingroup  experiments-memory

@sa @ref experiments-memory-bus-width-ld-bytes
@sa @ref experiments-memory-bus-width-ld-halfwords
@sa @ref experiments-memory-bus-width-ld-words
@sa @ref experiments-memory-bus-width-st-bytes
@sa @ref experiments-memory-bus-width-st-halfwords
@sa @ref experiments-memory-bus-width-st-words

## Background

CPUs with a 32-bit internal datapath or word width will often use
a 32-bit wide memory bus.

Most bus standards work in terms of word widths only, and for reads
in particular, cannot specify a sub-word memory access.
Write accesses use per-byte strobe lines.

## Purpose:

Generally, this experiment seeks to answer the question:
"When storing a byte to memory, is *only* that byte operated on in the memory
hierarchy and the SoC, or do we also see leakage from other surrounding
bytes?"

Specific questions arrising from this:
- Given that other bytes are also operated on, which bytes are these?
- Do the stored / leaking bytes correspond to a particular memory word
  alignment?

## Method:

- Identical to @ref experiments-memory-bus-width-ld-bytes
  but instead of loading a TTest variable from memory, we overwrite
  the variable in memory with zeros.


## Running the experiment

To run all stages of the experiment for a particular target device:

```
make -B USB_PORT=[PORT] UAS_TARGET=[TARGET] flow-memory-bus-bus-width-st-bytes
```

Where:
- `[PORT]` Is the UART/Serial port to communicate with it over.
- `[TARGET]` Is one of the target names listed in @ref targets

This will run all of the build, program, capture and analyse steps for
the experiment on the specified target.

The individual steps of the experiment are run with the following commands:

- Build: `make build_[TARGET]_memory-bus-width-st-bytes`
- Program: `make program_[TARGET]_memory-bus-width-st-bytes`
- Capture: `make capture_[TARGET]_memory-bus-width-st-bytes USB_PORT=[PORT]`
- Analyse: `make program_[TARGET]_memory-bus-width-st-bytes`

## References

1. [ARM AMBA 5 AHB Protocol Specification AHB5, AHB-Lite](https://static.docs.arm.com/ihi0033/bb/IHI0033B_B_amba_5_ahb_protocol_spec.pdf)
2. [ARM AMBA AXI and ACE Protocol Specification AXI3, AXI4, AXI5, ACE and ACE5](https://static.docs.arm.com/ihi0022/fb/IHI0022F_b_amba_axi_protocol_spec.pdf)
3. [Xilinx Local Memory Bus (LMB) v3.0 LogiCORE IP Product Guide](https://www.xilinx.com/support/documentation/ip_documentation/lmb_v10/v3_0/pg113-lmb-v10.pdf)
4. [Xilinx UG984 Microblaze Processor Reference Guide](https://www.xilinx.com/support/documentation/sw_manuals/xilinx2018_3/ug984-vivado-microblaze-ref.pdf)

*/
