/*!

@defgroup experiments-speculation-unpredictable-0 Unpredictable branching
@ingroup  experiments-speculation
@brief How does unpredictable branching affect speculative leakage?

@see @ref experiments-speculation-jump-shadow-0
@see @ref experiments-speculation-loop-0
@see @ref experiments-speculation-loop-1
@see @ref experiments-speculation-unpredictable-0

## Purpose:

This experiment builds on @ref experiments-speculation-jump-shadow-0
but tries to confuse any branch predictors by randomly branching
on instruction `N` or `N+1`. Instruction `N+2` is an `xor` which
uses two TTest variables as it's operands.

## Method:

Each run of the experiment has three inputs:

- A random bit

- Two TTest variables.

On each run of the experiment:

- Call the experiment payload function with the three inputs as
  parameters.

- The payload is made up of three sequential instructions:

  - Branch if random bit is zero

  - Branch if random bit is non-zero

  - XOR the two TTest variables together.

- Whatever the random bit value, the `xor` instruction is never
  executed, but may be partially exectued.

  - The randomness of the branch condition is designed to confuse
    any branch predictors as much as possible.


## Expectations:

- Assuming that the target device has a branch leakage shadow depth of
  one or more:

  - If the branch predictor can also be confused enough to prevent
    a perfect prediction, we should then see some leakage from
    the `xor` instruction.

- If the device has no branch leakage shadow (as determined by
  @ref experiments-speculation-jump-shadow-0) then no leakage should
  be observed.


## Running the experiment

To run all stages of the experiment for a particular target device:

```
make -B USB_PORT=[PORT] UAS_TARGET=[TARGET] flow-speculation-unpredictable-0
```

Where:
- `[PORT]` Is the UART/Serial port to communicate with it over.
- `[TARGET]` Is one of the target names listed in @ref targets

This will run all of the build, program, capture and analyse steps for
the experiment on the specified target.

The individual steps of the experiment are run with the following commands:

- Build: `make build_[TARGET]_speculation-unpredictable-0`
- Program: `make program_[TARGET]_speculation-unpredictable-0`
- Capture: `make capture_[TARGET]_speculation-unpredictable-0 USB_PORT=[PORT]`
- Analyse: `make analyse_[TARGET]_speculation-unpredictable-0`

*/
